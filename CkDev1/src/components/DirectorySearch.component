<apex:component controller="DirectorySearch" allowDML="true">
    <!--<meta name="viewport" content="width=device-width, initial-scale=1" />-->
    <link href="{!URLFOR($Resource.CommunitySpinnerZip, 'Spinner.css')}" rel="stylesheet"/>
    <style>
        #imageUrl {
                    margin-right: 5px; 
                    margin-top: 6px;
            }

</style>
    <script>
        var urlParams;
        var currentPage;
        var geocoder;
        var fieldsToIgnore = [ 'image', 'attributes', 'Id' ]; 
        Expanded = false;
        //Get Domain name from custom setting
        var domainNameValue = '{!profileDomain}';
        var domain_NoPhoto = '{!profileDomain}' + '/s/noPhoto.jpg';
        
        //variable declaration for the pagination
        var paginationDetails = JSON.parse('{!JsonStrPageDetails}');
        //Get pagination details from custom  settings
        if (paginationDetails != null) {
            var numberOfRecordsToDisplay = paginationDetails.perPageRecords;
            //var numberOfRecordsToDisplayExpanded = paginationDetails.Per_Page_Records__c*2;
            var PerPagePagesize = paginationDetails.perPageSize;
            var strSortingParam = paginationDetails.sortingParameters;
        }
        var paginationDefaultPage = 1;
        var paginationDefaultActivePage = 1;
        var totalPagesize = 0;
        var totalSearchRecords;
        var currentActivePage;
        var optionLabelValue = {};
        var queryStringParams = [];
        var PageSize = 0; 
        var PageNumber = 0;
       

        if(strSortingParam!=null)
        {
            //Sorting variables
            var sortParamList = strSortingParam.split(",");
        }

        //preparing map for sorting label and value
        for ( var i in sortParamList) {
            var splitValues = sortParamList[i].split(':');
            optionLabelValue[splitValues[0]] = splitValues[1];
        }//End

        //Set default sorting parameter value
        for ( var i in optionLabelValue) {
            var sortParam = optionLabelValue[i];
            break;
        }//End

         
           $(".test").ready(function(){
               //logic to get parameters 
               var urlParams = window.location.search.substring(1);
               urlParams = urlParams.replace(",", "");
               var textFields = $('#ds_inputFields').find('input[type=text],textarea,select');

               if(urlParams != null ){
                   var arrayParams = urlParams.split("&");
                   var isValueInserted = false;
                   var singleParam = [];
                   for(var j = 0 ; j < arrayParams.length; j++){
                       singleParam = arrayParams[j].split("=");
                       for(i = 0; i < textFields.length ; i++){
                           if(String(textFields[i].id) == singleParam[0]){
                               $(textFields[i]).val(unescape(singleParam[1]));
                               isValueInserted = true;
                            }
                        }//end for 
                    }
                    if(isValueInserted){
                         acfsObj.runSearch(numberOfRecordsToDisplay,1);
                    }
                }
            });

           

        $(document).ready(function() {
            //console.log("***setting" + settingInfo);
            //acfsObj.initMobile();
            mobile = false;

            currentPage = 1;

            acfsObj.getURLParams();
            //acfsObj.autoPagination();
            acfsObj.enableLoading();

           // $("#rel\\.contact\\.fname").val(getURLParameter('fname'));
           // $("#rel\\.contact\\.lname").val(getURLParameter('lname'));
            $(".ds_Collapsible").accordion({
                collapsible : true,
                active : 1,
                icons : {
                    "header" : "ui-icon-plusthick",
                    "activeHeader" : "ui-icon-minusthick"
                }
            });

            //Commnted code due to get parameters from custom setting
          /*  if($("#rel\\.contact\\.fname").val()!='' || $("#rel\\.contact\\.lname").val()!='')
            {
                acfsObj.runSearch(0,0);
            }*/
             //initialize();
            
            // DirectorySearchLoadFunction();
        }
        
        
        );
        
        //Method to run search on keyboard enter key
	    function enterRunSearch(e){  
           if (e.keyCode == 13) {
               acfsObj.runSearch(numberOfRecordsToDisplay, 1);
           }
        }
        
        function addSearchParamsToUrl(urlParams){
            window.history.pushState('DirectorySearch', 'Title', '?' + urlParams);
        }


        function getURLParameter(name) {
            return decodeURIComponent((new RegExp('[?|&]' + name + '='
                    + '([^&;]+?)(&|#|;|$)').exec(location.search) || [ , "" ])[1]
                    .replace(/\+/g, '%20'));
            //        || null
        }

        function sortResults() {
            sortParam = $(".sortSearchResult").val();
            //acfsObj.runSearch(0, 0);
            acfsObj.runSearch(numberOfRecordsToDisplay,1)
        }

        function actionSuccessCount(data) {
            $.each(data, function(i, item) {
                totalSearchRecords = item.recordCount;
            });

            console.log("***data" + data);
            var create_Url = '{!profileDomain}' + '/DynamicQueryResultsPageJson?name=User&sort='+ sortParam 
                                    + '&pagesize=' + PageSize + '&pagenumber=' + PageNumber + '&';

            if (PageNumber == 1) {
                currentPage = 1;
                //URL = acfsObj.CreateURL(url_Domain);
                URL = acfsObj.CreateURL(create_Url);
                acfsObj.runJsonAjax(URL, "Get", actionSuccess);
                        
            } else {
                numberOfRecordsToDisplay = PageSize;
                currentActivePage = PageNumber;
                URL = acfsObj.CreateURL(create_Url);
                acfsObj.runJsonAjax(URL, "Get", actionSuccessPagination);
            }
            console.log('**queryStringParams**' + queryStringParams);
            //saveDirectorySearchParams(queryStringParams);
            addSearchParamsToUrl(queryStringParams);
        }

        function actionSuccess(data) {
            $('#ds_resultsSet').html('');
            $('.ds_results .ds_header').remove();
            $('#ds_resultsSet').removeClass("spinnerCenter"); 
            
            //call pagination methods
            calculatePageSize(paginationDefaultPage, paginationDefaultActivePage);//calculate total pagesize
            PaginationCalculation(paginationDefaultPage);       

            if(Expanded==false)
            {
                expandBtnText = 'Expand';
            }
            else if(Expanded==true)
            {
                expandBtnText = 'Collapse';
            }
            if(data.length == 0) {
                 $('.ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                 window.location.hash = '#ds_resultsSet'; 
                 if(!mobile) {
                    $('.ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                 }
                
            }
            if(data.length > 0) {
            //alert('wasd');
            if(!mobile)
            {
                $('.ds_results').prepend('<div class="ds_header"><a class="ds_expandBtn" id="ds_expandBtn">'+expandBtnText+'</a><div class="ds_restuls">'+totalSearchRecords+' Results</div></div>');
            }
            else
            {
                $('.ds_results').prepend('<div class="ds_header"><div id="ds_restuls" class="ds_restuls">'+totalSearchRecords+' Results</div></div>');
                window.location.hash = '#ds_resultsSet';
            }
            }
            if ($(".sortSearchResult").length == 0 && data.length > 0) {
                var sortingString = 'Sort By <select class="sortSearchResult" onchange="sortResults()">';
                for ( var i in optionLabelValue) {
                    sortingString = sortingString
                            + '<option value="'+ optionLabelValue[i] +'">' + i
                            + '</option>';
                }
                sortingString = sortingString + '</select>';
                $('#ds_sort').append(sortingString);

            }

            $.each(data, function(i, item) {
                if (i < numberOfRecordsToDisplay) {
                    var extraItems = [];
                    fieldsToIgnore.push()
                    //$.each(item.sObj.Contact, function(fieldName, fieldValue) {
                    $.each(item.sObj.Contact, function(fieldName, fieldValue) {
                        if ($.inArray(fieldName, fieldsToIgnore) == -1) {
                            extraItems[extraItems.length] = fieldValue;
                        }
                    });

                    
                    if (item.sObj.FullPhotoUrl == null) {
                        buldContactHTML(item.sObj.Id, domain_NoPhoto,
                                item.sObj.Contact.Name, item.fields,
                                item.socialIconURLMap);
                    } else {
                        buldContactHTML(item.sObj.Id, item.sObj.FullPhotoUrl,
                                item.sObj.Contact.Name, item.fields,
                                item.socialIconURLMap);
                    }
                }

            });

            if(Expanded==true)
            {
                $('.ds_results .ds_contact').addClass('ds_expanded');
            }
            else if(Expanded==false)
            {
                $('.ds_results .ds_contact').removeClass('ds_expanded'); 
                
                
            }
            
            if(!mobile)
            {
                $(".ds_toolpanel").addClass("ds_resultsLeft");
                $(".ds_results").addClass("ds_resultsRight");
            }

            /*$(".ds_content").toggle(function(){
                $('.ds_results').animate({'width': '100%'},600); 
              },function(){
                $('.ds_results').animate({'width': '49%'},600);   
             });*/
            
            if(Expanded==false)
            {
                $('#ds_expandBtn').click(
                function(){
                    Expanded = true; 
                    $('.ds_results').animate({'width': '100%'},600);
                    $('.ds_toolpanel').hide("fast");  
                    numberOfRecordsToDisplay = numberOfRecordsToDisplay*2; 
                    acfsObj.runSearch(numberOfRecordsToDisplay,1);
                });
            }
            else if(Expanded==true)
            {
                $('#ds_expandBtn').click(
                function(){
                    Expanded = false;
                    $('.ds_results').animate({'width': '49%'},600);
                    $('.ds_toolpanel').show(650);
                    numberOfRecordsToDisplay = paginationDetails.perPageRecords;
                    acfsObj.runSearch(numberOfRecordsToDisplay,1);
                });
            }
        }

        //Method to get Records according to pagination logic
        function actionSuccessPagination(data) 
        {

            $('#ds_resultsSet').removeClass("spinnerCenter"); 
            $('#ds_resultsSet').html('');
            //$("#ds_sort").css("display", "block");

            if(Expanded==false) 
            {
                expandBtnText = 'Expand';
            } 
            else if(Expanded==true)
            {
                expandBtnText = 'Collapse';
            }

            if(!mobile)
            {
                $('.ds_results').prepend('<div class="ds_header"><a class="ds_expandBtn" id="ds_expandBtn">'+expandBtnText+'</a><div class="ds_restuls">'+totalSearchRecords+' Results</div></div>');
            }
            else
            {
                $('.ds_results').prepend('<div class="ds_header"><div class="ds_restuls">'+totalSearchRecords+' Results</div></div>');
            }

            $.each(data, function(i, item) {
                
                if (i < numberOfRecordsToDisplay) {
                    var extraItems = [];
                    fieldsToIgnore.push()
                    //$.each(item.sObj.Contact, function(fieldName, fieldValue) {
                    $.each(item.sObj.Contact, function(fieldName, fieldValue) {
                        if ($.inArray(fieldName, fieldsToIgnore) == -1) {
                            extraItems[extraItems.length] = fieldValue;
                        }
                    });
                    if (item.sObj.FullPhotoUrl == null) {
                        buldContactHTML(item.sObj.Id, domain_NoPhoto,
                                item.sObj.Contact.Name, item.fields,
                                item.socialIconURLMap);
                    } else {
                        
                        buldContactHTML(item.sObj.Id, item.sObj.FullPhotoUrl,
                                item.sObj.Contact.Name, item.fields,
                                item.socialIconURLMap);
                    }
                }

            });
            if(Expanded==true)
            {
                calculatePageSize(paginationDefaultPage, paginationDefaultActivePage);//calculate total pagesize
                PaginationCalculation(paginationDefaultPage);
                $('.ds_results .ds_contact').addClass('ds_expanded');
               
            }
            else if(Expanded==false)
            {
                $('.ds_results .ds_contact').removeClass('ds_expanded'); 
            }
            PaginationCalculation(currentActivePage);

            if(Expanded==false)
            {
                $('#ds_expandBtn').click(
                function(){
                    Expanded = true;
                    $('.ds_results').animate({'width': '100%'},600);
                    $('.ds_toolpanel').hide("fast");
                    numberOfRecordsToDisplay = numberOfRecordsToDisplay*2;
                    acfsObj.runSearch(numberOfRecordsToDisplay,1);
                });
            }
            else if(Expanded==true)
            {
                $('#ds_expandBtn').click(
                function(){
                    Expanded = false;
                    $('.ds_results').animate({'width': '49%'},600);
                    $('.ds_toolpanel').show(650);
                    numberOfRecordsToDisplay = paginationDetails.perPageRecords;
                    acfsObj.runSearch(numberOfRecordsToDisplay,1);
                });
            }
        }

        //method to calculate page size
        function calculatePageSize(pStartPage, pActivePage) {
            totalPagesize = Math.ceil(totalSearchRecords / numberOfRecordsToDisplay);
        }//End method

        //Method to dynamic creation of Next, Prev buttons 
        function PaginationCalculation(pActivePage) {
            var paginationString = '<div class="paginationStyle" style="">';
            var countPrev = 0;
            var countNext = 0;
            var startIndex;
            $('#ds_pagination').html('');
            $('#ds_count').html('');
            if (totalPagesize > 1) {
            
                //First Button Creation
                paginationString = paginationString
                        + '<div class="paginationBtnWrapper"><input type="button" id="btnFirst" onClick="accessPaginationButtons(1);" value="First"></a></div>';
                //End First Button Creation

                //Previous Button Creation
                paginationString = paginationString
                            + '<div class="paginationBtnWrapper"><input id="btnPrev" type="button" onClick="accessPaginationButtons('
                            + (pActivePage - 1)
                            + ');" value="Prev"></input></div>';
                //End Previous Button Creation
                
                startIndex = pActivePage - PerPagePagesize;

                if (startIndex < 1) {
                    startIndex = 1;
                }//End If
                else {
                    startIndex = startIndex + 1;
                }//End Else

                // How many pages can we make with results
                totalNumberOfPagesNeeded = Math.ceil(totalSearchRecords / numberOfRecordsToDisplay);
                MinNumberOfPagesNeeded = (totalNumberOfPagesNeeded < PerPagePagesize) ? totalNumberOfPagesNeeded:PerPagePagesize;

                for ( var i = startIndex; i < (startIndex + MinNumberOfPagesNeeded); i++) {

                    //Pagination Buttons
                    paginationString = paginationString
                            + '<div class="paginationBtnWrapper"><input type="button" id="btnList'
                            + i
                            + '" onChange="ApplyCss(this.id)" onClick="acfsObj.runSearch('
                            + numberOfRecordsToDisplay + ',' + i
                            + ');" value="' + i + '"></input></div>';//End

                }
                
                //Next Button Creation
                paginationString = paginationString
                            + '<div class="paginationBtnWrapper"><input id="btnNext" type="button" onChange="ApplyCss(this.id)" onClick="accessPaginationButtons('
                            + (pActivePage + 1)
                            + ');" value="Next"></input></div>';
                //End Button Creation
                
                //Last Button Creation
                paginationString = paginationString
                        + '<div class="paginationBtnWrapper"><input type="button" id="btnLast" onClick="accessPaginationButtons('
                        + totalPagesize + ');" value="Last"></input></div>';

                //End Last Button Creation
                
                paginationString = paginationString + '</div>';

                $('#ds_pagination').append(paginationString); 
                
                //Enable/Disable button logic
                $("#btnPrev").attr('disabled','disabled');
                $("#btnPrev").css('background', '#dddddd');
                $("#btnNext").attr('disabled','disabled');
                $("#btnNext").css('background', '#dddddd');
                
                
                
                if ((pActivePage - 1) >= 1) {
                    $("#btnPrev").removeAttr('disabled');
                    $("#btnPrev").css('background', '#F0F0F0');
                }//End Previous Button Logic
                
                if ((pActivePage + 1) <= totalPagesize) {
                    $("#btnNext").removeAttr('disabled');
                    $("#btnNext").css('background', '#F0F0F0');
                    countNext++;
                }//End Next Button Logic
                
                if(pActivePage == 1){
                    $("#btnFirst").attr('disabled','disabled');
                    $("#btnFirst").css('background', '#dddddd');
                }
                else{
                    $("#btnFirst").removeAttr('disabled');
                    $("#btnFirst").css('background', '#F0F0F0');
                }
    
                if(pActivePage == totalPagesize){
                    $("#btnLast").attr('disabled','disabled');
                    $("#btnLast").css('background', '#dddddd');
                }
                else{
                    $("#btnLast").removeAttr('disabled');
                    $("#btnLast").css('background', '#F0F0F0');
                }
                
                ApplyCss('btnList' + pActivePage);
                displayds_count(pActivePage);

            }//End If

        }//End Method

        //method to apply Active Css
        function ApplyCss(listId) {
            $(".paginationStyle").removeClass("highlightButton");
            $('#' + listId).addClass("highlightButton");
        }//End method

        //method to display current page record count
        function displayds_count(pCurrentPage) {
            $('#ds_count').html('');
            var startRecord = 1;
            for ( var i = 1; i < pCurrentPage; i++) {
                startRecord += numberOfRecordsToDisplay;
            }
            endRecord = pCurrentPage * numberOfRecordsToDisplay;
            if (totalSearchRecords < endRecord) {
                endRecord = totalSearchRecords;
            }
            
            var resultString = "Showing " + startRecord + "-" + endRecord
                    + " of " + totalSearchRecords;
             
            $('#ds_count').append(resultString);
            
        }//End method

        //Method to get records for the Next/Prev button clicks
        function accessPaginationButtons(pStartPage) {
            PaginationCalculation(pStartPage);
            acfsObj.runSearch(numberOfRecordsToDisplay, pStartPage);
        }//End method

        function actionNotValid() {
            $('#ds_resultsSet').html('');
        }

        // function to get records based on the pagination logic
        function actionSuccessUpdatePage(data) {
            $.each(data, function(i, item) {
                var extraItems = [];
                $.each(item.sObj, function(fieldName, fieldValue) {
                    if ($.inArray(fieldName, fieldsToIgnore) == -1) {
                        extraItems[extraItems.length] = fieldValue;
                    }
                });
                if (item.image != null) {
                    buldContactHTML(item.sObj.Id, item.sObj.image, item.rowOne,
                            item.rowTwo, item.rowThree, item.extra,
                            item.socialIconURL1, item.socialIconImgURL1,
                            item.socialIconURL2, item.socialIconImgURL2,
                            item.socialIconURL3, item.socialIconImgURL3);
                } else {
                    buldContactHTML(item.sObj.Id, domain_NoPhoto,
                            item.rowOne, item.rowTwo, item.rowThree,
                            item.extra, item.socialIconURL1,
                            item.socialIconImgURL1, item.socialIconURL2,
                            item.socialIconImgURL2, item.socialIconURL3,
                            item.socialIconImgURL3);
                }
            });
        }//End method

        function addHttpIfMissing(redirURL)
        {
            if(!redirURL.includes('http'))
            {
                redirURL = 'http://' + redirURL;
            }
            return redirURL;
        }

        function buldContactHTML(userId, userPhoto, userName, fieldRow, listSocialIconURL)  
        {
            if(!mobile)
            {
                contactHTML = '<div class="ds_contact"><div class="ds_photo"><a href="'+ '/' + domainNameValue + '/' + userId +'" target="_self"><img src="'+ userPhoto +'" alt="'+ userName + '" /></a></div><div class="ds_innerWrapper"><div class="ds_name"><a href="' + '/' + domainNameValue + '/' + userId +'" target="_self">'
                        + userName + '</a></div><div class="ds_extras">';

                //Iterate through all other Fields
                for ( var field in fieldRow) {
                    contactHTML = contactHTML + '<div>' + fieldRow[field] + '</div>';
                }
                contactHTML = contactHTML + '</div><div class="ds_follow"></div><div class="socialIcons">';

                //Iterate through all social icon/links
                /*for ( var i in listSocialIconURL)  
                {
                    if(listSocialIconURL[i]!='')
                    {
                    
                        var arraySocialIcons = i + '=' +listSocialIconURL[i];
                        console.log(arraySocialIcons);
                        
                        contactHTML += '<a target="_blank" id = "imageUrl" href="' + arraySocialIcons +'"><img src="'+ listSocialIconURL[i] +'"/></a>';
                        /*for ( var j in arraySocialIcons) {
                            var value = arraySocialIcons[j].split("=");
                            
                            contactHTML += '<a target="_blank" id = "imageUrl" href="' + arraySocialIcons[j] +'"><img src="'+ value[1] +'"/></a>';
                            console.log('value of arraySocialIcons[j] in map'+arraySocialIcons[j]);
                        }*/
                //    }
                //}
                 //Iterate through all social icon/links
                for ( var i in listSocialIconURL) 
                {
                    if(listSocialIconURL[i]!='')
                    {
                        contactHTML = contactHTML+ '<a target="_blank" href="'+ addHttpIfMissing(listSocialIconURL[i]) +'"><img src="'+ i +'"/></a>';
                    }
                }
                
                contactHTML = contactHTML + '</div></div><div class="clear"></div></div>';
            }
            else
            {
                contactHTML = '<div class="ds_contactMobile"><div class="ds_photo"><a href="javascript:sforce.one.navigateToSObject(\''+userId +'\');"><img src="'+ userPhoto +'" alt="'+ userName + '" /></a></div><div class="ds_innerWrapper"><div class="ds_name"><a href="javascript:sforce.one.navigateToURL(\'' + '/' + domainNameValue + '/' + userId +'\');">'
                        + userName + '</a></div><div class="ds_extras">';

                //Iterate through all other Fields
                for ( var field in fieldRow) {
                    contactHTML = contactHTML + '<div>' + fieldRow[field] + '</div>';
                }
                contactHTML = contactHTML + '</div><div class="ds_follow"></div><div class="socialIcons">';

                //Iterate through all social icon/links
                for ( var i in listSocialIconURL) 
                {
               
                    if(i!='')
                    {
                    console.log('value of i in map'+i);
                    var arraySocialIcons = i.split(","); 
                    for ( var j in arraySocialIcons)
                    {
                       
                        contactHTML += '<a target="_blank" id = "imageUrl" href="'+ arraySocialIcons[j] +'"><img src="'+ arraySocialIcons[j] +'"/></a>';
                       
                    }
                    
                }
                }
                
                contactHTML = contactHTML + '</div></div><div class="clear"></div></div>';
            }
            $('#ds_resultsSet').append(contactHTML);
        }

        acfsObj = {
            initMobile : function() {
                //Sophak Added for Mobile resposive.    
                if (navigator.userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i) != null) {
                    //if (navigator.userAgent.match(/Chrome/i) != null) {
                    mobile = true;
                    //var fileref = document.createElement('script')
                    //fileref.setAttribute("type", "text/javascript")
                    //fileref.setAttribute("src", "https://code.jquery.com/mobile/1.4.4/jquery.mobile-1.4.4.min.js")
                    //document.getElementsByTagName("head")[0].appendChild(fileref);
                } else {
                    mobile = false;
                    $('body').addClass('pc');
                }
            },
            autoPagination : function() {
                $(window)
                        .scroll(
                                function() {
                                    var url_DomainName = '{!profileDomain}'+'/DynamicQueryResultsPageJson?name=User&view=List&pagesize=10&pagenumber=';
                                    
                                     var url_Domain = '{!profileDomain}'+'/apex/DynamicQueryResultsPageJson?name=Profile&view=List&pagesize=10&pagenumber='+currentPage+'&';
                                    if ($(window).scrollTop() == $(document)
                                            .height()
                                            - $(window).height()) {
                                        currentPage = currentPage + 1;
                                        //URL = acfsObj.CreateURL(url_Domain);
                                        URL = acfsObj
                                                .CreateURL(url_DomainName
                                                        + currentPage + '&');
                                        acfsObj.runJsonAjax(URL, "Get",
                                                actionSuccessUpdatePage);
                                        console
                                                .log("*****runJson*** : "
                                                        + acfsObj
                                                                .runJsonAjax(
                                                                        URL,
                                                                        "Get",
                                                                        actionSuccessUpdatePage));
                                    }
                                });
            },
            getURLParams : function() {
                var match, pl = /\+/g, // Regex for replacing addition symbol with a space
                search = /([^&=]+)=?([^&]*)/g, decode = function(s) {
                    return decodeURIComponent(s.replace(pl, " "));
                }, query = window.location.search.substring(1);

                urlParams = {};
                while (match = search.exec(query))
                    urlParams[decode(match[1])] = decode(match[2]);

            },
            enableLoading : function() {
                var $loading = $('#loadingDiv').hide();
                $(document).ajaxStart(function() {
                    $loading.show();
                }).ajaxStop(function() {
                    $loading.hide();
                });
            },
            CreateURL : function(passedUrl) {
                url = passedUrl;
                queryStringParams  = [];
                $("#ds_inputFields :input").each(function() 
                {
                    if($(this).val()!='')
                    {
                        url = url + $(this).attr("id") + "=";
                        url = url + escape($(this).val()+'*') + "&";
                        queryStringParams.push($(this).attr("id") + "=" + escape($(this).val()) +"&");
                        
                    }
                    
                    
                });
                console.log("****url: " + url);
                console.log("****queryStringParams: " + queryStringParams); 
                
                /*$("#ds_inputFields").children().children("div").each(function () {
                    url = url + $(this).attr("id") + "=";
                    $(this).children("div").children("div").children("input").each(function () {
                       url = url + $(this).val() + "&";
                    });
                 });
                 */
                return url;
            },
            runJsonAjax : function(url, type, callback) {

                var obj = $.ajax({
                    type : type,
                    url : url,
                    success : callback,
                    async: true,
                    error : function(xhr, status, error) {
                        //alert(error + status + xhr);
                        //$('#ds_resultsSet').html('<div class="ds_error">No results were found</div>');
                        //if(error == "Internal Server Error"){
                                //$('div').removeClass("spinner medium");
                                $(".ds_results").find("*").removeClass("spinner medium");
                                $(".ds_results").find("*").removeClass("spinnerCenter");
                                $('.ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                                //$("#ds_results").find("*").removeClass("spinner medium spinnerCenter");
                                //$('.ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                                //$(".ds_toolpanel").addClass("ds_resultsLeft");
                               // $(".ds_results").addClass("ds_resultsRight");
                               
                       // }
                       // else{
                            //$('#ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                       // }
                        
                    }
                });
                return obj;
            },

            runJsonAjaxSync : function(url, type, callback) {

                var obj = $.ajax({
                    type : type,
                    url : url,
                    success : callback,
                    async: false,
                    error : function(xhr, status, error) {
                        //alert(error + status + xhr);
                        //$('#ds_resultsSet').html('<div class="ds_error">No results were found</div>');
                        $(".ds_results").find("*").removeClass("spinner medium");
                                $(".ds_results").find("*").removeClass("spinnerCenter");
                                $('.ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                        $('#ds_results').html('<div class="ds_header"><div class="ds_restuls">0 Results</div></div><div class="ds_innerWrapper"><div class="ds_sort" id="ds_sort"></div><div class="ds_resultsSet" id="ds_resultsSet"><div class="ds_error">No results were found</div></div><div class="ds_count" id="ds_count">Showing 0 of 0</div><div class="ds_pagination" id="ds_pagination"></div></div>');
                    }
                });
                return obj;
            },
            
            runSearch : function(pPageSize, pPageNumber) {
                //acfsObj.initMobile();
                mobile = false;
                if(!acfsObj.checkEmptySearchFields())
                {
                    //$(".ds_results").addClass("ds_resultsRight");
                    //$(".ds_resultsLeft").css("float","none");
                   // $(".ds_resultsLeft").width('50%');
                    $('.ds_resultsRight').show();
                    $('.ds_count').html('');
                    $('.ds_pagination').html('');
                    $('#ds_resultsSet').html('');
                    $('.ds_results .ds_header').remove();
                    
                   
                    if(!mobile)
                    {
                        $(".ds_toolpanel").addClass("ds_resultsLeft");
                        $(".ds_results").addClass("ds_resultsRight");
                    }
                    $('#ds_resultsSet').addClass("spinnerCenter");
                    $('#ds_resultsSet').append('<div class="spinner medium"></div>');

                    var url_Domain = '{!profileDomain}'+'/apex/DynamicQueryResultsPageJson?name=User&pagesize=10&pagenumber=1&';
                                    
                                    
                    var url_DomainName = '{!profileDomain}'+'/apex/DynamicQueryResultsPageJson?name=User&' + 'pagesize='
                                        + pPageSize
                                        + '&pagenumber=' + pPageNumber + '&';

                    var url_count = '{!profileDomain}' + '/DynamicQueryResultsPageJson?name=User&count=true&';

                    PageSize = pPageSize;
                    PageNumber = pPageNumber;

                    URL = acfsObj.CreateURL(url_count);
                    acfsObj.runJsonAjax(URL, "Get", actionSuccessCount);
                }else{
                     
                    actionNotValid();  
                    //$('.ds_resultsRight').hide();
                    $('.ds_resultsRight').hide('');
                    alert("Input fields are empty");
                }
            },

            clearfields : function()
            {
                $('#ds_inputFields :input:not(:button)').val("");
                $('.ds_resultsRight').hide();
                 //$(".ds_resultsLeft").css("float","none");
                 /*$('.ds_resultsRight').remove();
                 $('.ds_resultsLeft').width('100%');*/
                                
            },
            
            checkEmptySearchFields : function(){
                var textFields = $('#ds_inputFields').find('input[type=text],textarea,select');
                var countTextValues = true;
                for(i = 0; i < textFields.length ; i++){
                    if($(textFields[i]).val() != ''){
                        countTextValues = false;
                    }
                }//end for
                return countTextValues;
            }
            
        };
        
    </script>
    
    <div id="content" class="ds_content">
        <div class="ds_toolpanel">
            <div id="ds_inputFields" class="ds_inputFields" onkeypress="enterRunSearch(event);">
                <apex:outputText value="{!inputFieldsHTML}" escape="false" styleClass="test" 
                 />
            </div>
            <div class="ds_buttons">
                <input type="button" id ="searchBtn" value="Search" onClick="acfsObj.runSearch(numberOfRecordsToDisplay,1)" ></input>
                <a onClick="acfsObj.clearfields()">Clear All</a>
            </div>
        </div>
        <div class="ds_results">
            <div class="ds_innerWrapper">
                <div id="ds_sort" class="ds_sort"></div>
                <div id="ds_resultsSet" class="ds_resultsSet"></div>
                <div id="ds_count" class="ds_count"></div>
                <div id="ds_pagination" class="ds_pagination"></div>
            </div>
        </div>
    </div>
    
    
    <!-- Map Implementation -->
    
<!--<apex:includeScript value="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"/>-->
<!--<script type="text/javascript" src="https://maps.google.com/maps/api/js?v=3&sensor=false&language=en"> </script>-->
<!-- <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script> -->
<!--     <script>
   var map,geocoder,infowindow;  
    var blueIcon = '//www.google.com/intl/en_us/mapfiles/ms/micons/blue-dot.png';
  /*  $(document).ready(function(){  
        initialize();  
        
      //  $('#rel.contact.fname').val("test");
       // URL = 'alumni/DynamicQueryResultsPageJson?name=User&sort=contact.firstname&rel.contact.fname=test&undefined=Search&';
       // acfsObj.runSearch(0, 0);
      }); */ 
    function initialize() 
    {
    geocoder = new google.maps.Geocoder();
      var myLatlng = new google.maps.LatLng(18.5541728, 73.8196158);
     
      console.log
      var myOptions = 
      {
        zoom: 9,
        center: myLatlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      }
       map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
       codeAddress();  
    }
     function codeAddress()
     {  
     
        //prepare a string for geocoding  
        var address = [];
        address.push("NSG IT Park Above Croma Mall,Aundh Pune-411007");
        address.push("e square university road,Pune,India");
        address.push("Eiffel Tower, Avenue Anatole France, Paris, France");
        address.push("Taj Mahal, Agra, Uttar Pradesh");
        address.push("Gateway Of India Mumbai, Mumbai, Maharashtra");
       
       
       var countMarker = 1;  
        for(var i = 0 ;i < address.length ; i++){
            //geocode the address  
            geocoder.geocode( { 'address': address[i] }, function(results, status) 
            {  
               //console.log('****address[i]' + address[i]);
              //if it is a success  
              if (status == google.maps.GeocoderStatus.OK) 
              {  
                var location = results[0].geometry.location;
                console.log('location---'+location);   
                var marker = addMarker(location, countMarker);  
                console.log('***MARKER'+marker);  
                //attach info window to the marker  
               attachInfoWindow(marker,results[0]);  
               countMarker++;
              }  
              else 
              {  
                alert(status);
              }  
            });
        }
        
      }  
      /*  
      *This method adds a marker to the provided location  
      **/  
      
     
      function addMarker(location, markerNumber) {  
      
       marker = new google.maps.Marker({  
           position: location,  
           map: map,
           size : new google.maps.Size(100, 300),
           icon: 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + markerNumber +'|FF0000|000000'  ,
           title :'marker -one'
         });  
         //set the bounds and initial zoom  
       var latlngbounds = new google.maps.LatLngBounds();  
       latlngbounds.extend(marker.getPosition());  
       map.fitBounds(latlngbounds);  
       map.setZoom(14);  
       return marker;  
      }  

      
      //this function shows the address of a marker when it is clicked  
     function attachInfoWindow(marker,address){  
     // var address1 = '7th Floor,NSG IT Park Above Croma Mall,Aundh Pune-411007';
        google.maps.event.addListener(marker, 'click', function() {  
          if(infowindow!=null)  
           {  
             infowindow.close();  
           }  
         //HTML formated string that is used to dispaly info window over the map markers currently showing the formated address  
         var contentString = '<div class=" ui-state-active ui-corner-top" style="font-size: 1em; padding: 5px;">'+address.formatted_address+'</div>'  
                   +'<div class="ui-widget-content ui-corner-bottom" style="font-size: .9em; padding: 15px;"></div>';  
         infowindow = new google.maps.InfoWindow({  
           content: contentString  
         });  
          infowindow.open(map,marker);  
        });  
     }  

        
</script> -->
<!--<div id="map_canvas" style="width: 600px; height: 400px"></div>-->
</apex:component>